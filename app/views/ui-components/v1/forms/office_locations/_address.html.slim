#addressDetails
  .row.pl-1
    h4 Office Location
  .row
    .col-md-9.col-sm-6.col-xs-12
      label for="inputAddress1" = l10n('employers.registration.address')
      = f.text_field :address_1, class:"form-control mb-1",  placeholder: "123 Main St", required: 'true', id:'inputAddress1'
      .invalid-feedback
        | Please provide a valid address.
    .col-md-3.col-sm-6.col-xs-12
      label for="inputKind" = l10n('employers.registration.kind')
      - kinds = f.object.office_kind_options; kinds = kinds.rotate if params[:child_index]
      = f.select :kind, options_for_select(kinds.map {|a| [a.to_s.humanize, a.to_s]}, selected: f.object.try(:kind)),{}, class: "form-control", required: true, id:'kindSelect',placeholder: 'KIND', onchange:'checkOLKind(this)'
      .invalid-feedback
        | Please select an address kind.

  .row
    .col-md-12.col-sm-12.col.xs-12
      label for="inputAddress2" Address 2
      = f.text_field :address_2, class:"form-control mb-1",  placeholder: "Address 2"

  .row[data-controller='zip-check']
    .col-md-3.col-sm-12.col-xs-12
      label for="inputCity" = l10n("employers.registration.city")
      = f.text_field :city, class: "form-control mb-1", required: true, placeholder: 'CITY'
      .invalid-feedback
        | Please provide a valid city.
    .col-md-3.col-sm-12.col-xs-12
      label for="inputState" = l10n('employers.registration.state')
      = f.select(:state, options_for_select(State::NAME_IDS.map(&:last).sort_by {|c| c }, selected: f.object.try(:state)), {include_blank: "SELECT STATE"}, class:'form-control mb-1', id:'inputState', required: true)
      .invalid-feedback
        | Please select a state.
    .col-md-3.col-sm-12.col-xs-12
      label for="inputZip" = l10n('employers.registration.zip')
      = f.text_field :zip, id:'inputZip', class:'form-control mb-1', minlength:'5', maxlength:'5'
      .invalid-feedback
        | Please provide a valid zipcode.

    - if (aca_address_query_county && @agency.profile_type != "broker_agency")
      .col-md-3.col-sm-12.col-xs-12
        label for="inputCounty" County
        = f.select :county, options_for_select([]), {include_blank: "SELECT COUNTY"}, class:'form-control mb-1', id:'inputCounty', data: { options: BenefitMarkets::Locations::CountyZip.all.map(&:county_name).uniq }
        .invalid-feedback
          | Please provide a valid county.

javascript:
  function checkKind(element) {
    checkOLKind(element)
    updateCounty(element)
  }

  function updateCounty(element) {
    var value = element.value;
    var zip = document.getElementById('inputZip');
    if (value === 'primary' && zip.value.length > 4) {
      var county = document.getElementById('inputCounty');
      var zipValue = zip.value;
      var countyNames = fetchCounty(zipValue);
      if (countyNames.length >= 1) {
        county.removeAttribute('disabled');
        county.setAttribute('required', 'true');
        for (let option of countyNames) {
          let newOption = document.createElement("option")
          newOption.text = option;
          newOption.value = option;
          county.add(newOption);
        }
      } else {
        county.setAttribute('disabled', true);
        county.options.length = 0;
        let newOption = document.createElement("option")
        newOption.text = "Zipcode outside of MA";
        newOption.value = "Zipcode outside of MA";
        county.add(newOption);
        zip.parentElement.classList.add('was-validated');
        zip.setCustomValidity("Zipcode outside of MA");
      }
    };
  }

  function fetchCounty(zip) {
    var county = '';
    $.ajax({
      method: 'POST',
      url: '/benefit_sponsors/profiles/registrations/counties_for_zip_code',
      data: { zip_code: zip },
      async: false,
      success: function (data) {
        county = data;
      }
    });
    return county;
  }

  document.addEventListener('DOMContentLoaded', function () {
    var element = document.getElementById('kindSelect');
    var value = element.value;
    checkKind(element, value)
  });
