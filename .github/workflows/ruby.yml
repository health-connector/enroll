name: Full suite check
on:
  push:
  schedule:
    - cron: "0 6 * * *"

concurrency:
  group: qb-${{ github.ref }}
  cancel-in-progress: true #This is temporary to avoid trunk GHA collisions
    

env: # https://stackoverflow.com/questions/59867124/how-can-i-access-github-action-environment-variables-within-a-bash-script-run-by
  TEST_BOOSTERS_RSPEC_TEST_FILE_PATTERN: "{spec,components/benefit_markets/spec,components/benefit_sponsors,components/notifier,components/sponsored_benefits,components/transport_gateway,components/transport_profiles}/**/*_spec.rb"
  TB_RSPEC_FORMATTER: "progress"

jobs:
  # brakeman:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v3
  #     - uses: ruby/setup-ruby@v1
  #       with:
  #         bundler-cache: true
  #         rubygems: 3.3.26
  #     - run: gem install brakeman
  #     - run: brakeman -i config/brakeman.ignore --add-checks-path checks --format html --out brakeman.html
  #     - name: upload brakeman failure report
  #       uses: actions/upload-artifact@v3
  #       if: failure()
  #       with:
  #         name: Security Reports
  #         path: brakeman.html
  # brakeman-engines:
  #   runs-on: ubuntu-20.04
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       engine:
  #         - benefit_markets
  #         - benefit_sponsors
  #         - notifier
  #         - sponsored_benefits
  #         - transport_gateway
  #         - transport_profiles
  #   steps:
  #     - uses: actions/checkout@v3
  #     - uses: ruby/setup-ruby@v1
  #       with:
  #         bundler-cache: true
  #         rubygems: 3.3.26
  #     - run: gem install brakeman
  #     - name: Run Brakeman In ${{ matrix.engine }}
  #       run: |
  #         cd components/${{ matrix.engine }}
  #         brakeman -i config/brakeman.ignore --add-checks-path ../../engine_checks/ --format html --out ../../${{ matrix.engine }}.brakeman.html
  #     - name: upload brakeman failure report
  #       uses: actions/upload-artifact@v3
  #       if: failure()
  #       with:
  #         name: Security Reports
  #         path: ${{ matrix.engine }}.brakeman.html
  rspec:
    # needs: [brakeman, brakeman-engines]
    runs-on: ubuntu-latest
    if: false # This is temporary to test cucumbers only
    services:
      # rabbitmq:
      #   image: rabbitmq:latest
      #   ports:
      #     - 5672:5672
      #     - 15672:15672
      #   options: >-
      #     --name "rabbitmq"
      #     --health-cmd "rabbitmqctl node_health_check"
      #     --health-interval 10s
      #     --health-timeout 5s
      #     --health-retries 5
      mongo:
        image: mongo:3.6
        ports:
          - 27017:27017
        options: >-
          --name "mongo"
          --health-cmd mongo
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      # redis:
      #   image: redis:3.2-alpine
      #   ports:
      #     - 6379
      #   options: >-
      #     --name "redis"
      #     --health-cmd "redis-cli ping"
      #     --health-interval 10s
      #     --health-timeout 5s
      #     --health-retries 5
    strategy:
      fail-fast: false
      matrix:
        group:
          [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25 ]
    steps:
      - uses: actions/checkout@v3
      - uses: ruby/setup-ruby@v1
        with:
          bundler-cache: true
          rubygems: 3.3.26
      - uses: actions/setup-node@v3
        with:
          node-version: '9'
      - name: Install Test Boosters gem
        run: gem install treye-semaphore_test_boosters --version '2.5.2'
      - name: Restore Node Modules
        id: npm-cache
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node_modules-v14-${{ hashFiles('yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-node_modules-v14-${{ hashFiles('yarn.lock') }}
      - name: Install node dependencies
        if: steps.npm-cache.outputs.cache-hit != 'true'
        run: yarn install
      - name: Run tests
        env:
          COVERAGE: 'true'
          # RSPEC_SPLIT_CONFIGURATION_PATH: 'ci/rspec-split-config.json'
          TEST_ENV_NUMBER: ${{ matrix.group }}9
          TEST_BOOSTERS_RSPEC_TEST_FILE_PATTERN: '{spec,components/benefit_markets,components/benefit_sponsors,components/notifier,components/sponsored_benefits,components/transport_gateway,components/transport_profiles}/**/*_spec.rb'
        run: rspec_booster --job ${{ matrix.group }}/${{ strategy.job-total }}
      # - name: copy coverage report
      #   if: (github.event_name == 'push') && (github.ref == 'refs/heads/trunk')
      #   run: |
      #     cp coverage/coverage.xml ${{ github.workspace }}/coverage/${{ matrix.group }}_${{ strategy.job-total }}_coverage.xml
      # - name: Upload coverage artifact
      #   uses: actions/upload-artifact@v2
      #   if: (github.event_name == 'push') && (github.ref == 'refs/heads/trunk')
      #   with:
      #     name: code-coverage
      #     path: ${{ github.workspace }}/coverage/${{ matrix.group }}_${{ strategy.job-total }}_coverage.xml
  cucumber:
    # needs: [brakeman, brakeman-engines]
    runs-on: ubuntu-latest
    services:
      # rabbitmq:
      #   image: rabbitmq:latest
      #   ports:
      #     - 5672:5672
      #     - 15672:15672
      #   options: >-
      #     --name "rabbitmq"
      #     --health-cmd "rabbitmqctl node_health_check"
      #     --health-interval 10s
      #     --health-timeout 5s
      #     --health-retries 5
      mongo:
        image: mongo:3.6
        ports:
          - 27017:27017
        options: >-
          --name "mongo"
          --health-cmd mongo
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      # redis:
      #   image: redis:3.2-alpine
      #   ports:
      #     - 6379
      #   options: >-
      #     --name "redis"
      #     --health-cmd "redis-cli ping"
      #     --health-interval 10s
      #     --health-timeout 5s
      #     --health-retries 5
    strategy:
      fail-fast: false
      matrix:
        group:
          [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15 ]
    steps:
      - uses: actions/checkout@v3
      - uses: ruby/setup-ruby@v1
        with:
          bundler-cache: true
          rubygems: 3.3.26
      - uses: actions/setup-node@v3
        with:
          node-version: '9'
      - name: Install Test boosters gem
        run: gem install treye-semaphore_test_boosters --version '2.5.2'
      - name: Restore Node Modules
        id: npm-cache
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node_modules-v14-${{ hashFiles('yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-node_modules-v14-${{ hashFiles('yarn.lock') }}
      - name: Install node dependencies
        if: steps.npm-cache.outputs.cache-hit != 'true'
        run: yarn install
      - name: Run tests
        env:
          COVERAGE: 'true'
          TEST_ENV_NUMBER: ${{ matrix.group }}5
          #cucumber_booster --job 4/5 features
        run: cp -f config/cucumber_split.yml config/cucumber.yml; cucumber_booster --job ${{ matrix.group }}/${{ strategy.job-total }} features
      # - name: copy coverage report
      #   if: (github.event_name == 'push') && (github.ref == 'refs/heads/trunk')
      #   run: |
      #     cp coverage/coverage.xml ${{ github.workspace }}/coverage/cukes-${{ matrix.group }}_${{ strategy.job-total }}_coverage.xml
      # - name: Upload coverage artifact
      #   uses: actions/upload-artifact@v2
      #   if: (github.event_name == 'push') && (github.ref == 'refs/heads/trunk')
      #   with:
      #     name: code-coverage
      #     path: ${{ github.workspace }}/coverage/cukes-${{ matrix.group }}_${{ strategy.job-total }}_coverage.xml

  # testing_matrix:
  #   name: ${{matrix.command_configs.name}}
  #   runs-on: ${{ matrix.os }}
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       os: [ubuntu-latest]
  #       node: [9.x]
  #       mongodb-version: ["3.6"]
  #       command_configs:
  #         - name: rubocop
  #           skip_js: "true"
  #           test_command: |
  #             git fetch --no-tags origin
  #             bundle exec rubocop-git origin/master | grep "no offenses detected"
  #         - name: rspec 1/12
  #           test_command: rspec_booster --job 1/12
  #         - name: rspec 2/12
  #           test_command: rspec_booster --job 2/12
  #         - name: rspec 3/12
  #           test_command: rspec_booster --job 3/12
  #         - name: rspec 4/12
  #           test_command: rspec_booster --job 4/12
  #         - name: rspec 5/12
  #           test_command: rspec_booster --job 5/12
  #         - name: rspec 6/12
  #           test_command: rspec_booster --job 6/12
  #         - name: rspec 7/12
  #           test_command: rspec_booster --job 7/12
  #         - name: rspec 8/12
  #           test_command: rspec_booster --job 8/12
  #         - name: rspec 9/12
  #           test_command: rspec_booster --job 9/12
  #         - name: rspec 10/12
  #           test_command: rspec_booster --job 10/12
  #         - name: rspec 11/12
  #           test_command: rspec_booster --job 11/12
  #         - name: rspec 12/12
  #           test_command: rspec_booster --job 12/12
  #         - name: cucumber 1/5
  #           test_command: |
  #             cp -f config/cucumber.yml config/cucumber.yml.bak
  #             cp -f config/cucumber_split.yml config/cucumber.yml
  #             cat config/cucumber.yml
  #             export DISPLAY=:99
  #             if cucumber_booster --job 1/5 features
  #             then
  #               echo "Cucumber passed the first time!"
  #               exit 0
  #             else
  #               cat config/cucumber.yml
  #               ls -ltr && ls -ltr tmp
  #               echo "catting rerun.txt"
  #               cat rerun.txt
  #               echo "Give cucumber one more try"
  #               if bundle exec cucumber @rerun.txt --profile first_rerun
  #               then
  #                 echo "Cucumber worked on retry"
  #                 exit 0
  #               else
  #                 echo "Give cucumber yet another try"
  #                 cat config/cucumber.yml
  #                 bundle exec cucumber @tmp/cucumber_failures_2.log --profile second_rerun
  #               fi
  #             fi
  #           needs_chromedriver: true
  #         - name: cucumber 2/5
  #           test_command: |
  #             cp -f config/cucumber.yml config/cucumber.yml.bak
  #             cp -f config/cucumber_split.yml config/cucumber.yml
  #             cat config/cucumber.yml
  #             export DISPLAY=:99
  #             if cucumber_booster --job 2/5 features
  #             then
  #               echo "Cucumber passed the first time!"
  #               exit 0
  #             else
  #               cat config/cucumber.yml
  #               ls -ltr && ls -ltr tmp
  #               echo "catting rerun.txt"
  #               cat rerun.txt
  #               echo "Give cucumber one more try"
  #               if bundle exec cucumber @rerun.txt --profile first_rerun
  #               then
  #                 echo "Cucumber worked on retry"
  #                 exit 0
  #               else
  #                 echo "Give cucumber yet another try"
  #                 cat config/cucumber.yml
  #                 bundle exec cucumber @tmp/cucumber_failures_2.log --profile second_rerun
  #               fi
  #             fi
  #           needs_chromedriver: true
  #         - name: cucumber 3/5
  #           test_command: |
  #             cp -f config/cucumber.yml config/cucumber.yml.bak
  #             cp -f config/cucumber_split.yml config/cucumber.yml
  #             cat config/cucumber.yml
  #             export DISPLAY=:99
  #             if cucumber_booster --job 3/5 features
  #             then
  #               echo "Cucumber passed the first time!"
  #               exit 0
  #             else
  #               cat config/cucumber.yml
  #               ls -ltr && ls -ltr tmp
  #               echo "catting rerun.txt"
  #               cat rerun.txt
  #               echo "Give cucumber one more try"
  #               if bundle exec cucumber @rerun.txt --profile first_rerun
  #               then
  #                 echo "Cucumber worked on retry"
  #                 exit 0
  #               else
  #                 echo "Give cucumber yet another try"
  #                 cat config/cucumber.yml
  #                 bundle exec cucumber @tmp/cucumber_failures_2.log --profile second_rerun
  #               fi
  #             fi
  #           needs_chromedriver: true
  #         - name: cucumber 4/5
  #           test_command: |
  #             cp -f config/cucumber.yml config/cucumber.yml.bak
  #             cp -f config/cucumber_split.yml config/cucumber.yml
  #             cat config/cucumber.yml
  #             export DISPLAY=:99
  #             if cucumber_booster --job 4/5 features
  #             then
  #               echo "Cucumber passed the first time!"
  #               exit 0
  #             else
  #               cat config/cucumber.yml
  #               ls -ltr && ls -ltr tmp
  #               echo "catting rerun.txt"
  #               cat rerun.txt
  #               echo "Give cucumber one more try"
  #               if bundle exec cucumber @rerun.txt --profile first_rerun
  #               then
  #                 echo "Cucumber worked on retry"
  #                 exit 0
  #               else
  #                 echo "Give cucumber yet another try"
  #                 cat config/cucumber.yml
  #                 bundle exec cucumber @tmp/cucumber_failures_2.log --profile second_rerun
  #               fi
  #             fi
  #           needs_chromedriver: true
  #         - name: cucumber 5/5
  #           test_command: |
  #             cp -f config/cucumber.yml config/cucumber.yml.bak
  #             cp -f config/cucumber_split.yml config/cucumber.yml
  #             cat config/cucumber.yml
  #             export DISPLAY=:99
  #             if cucumber_booster --job 5/5 features
  #             then
  #               echo "Cucumber passed the first time!"
  #               exit 0
  #             else
  #               cat config/cucumber.yml
  #               ls -ltr && ls -ltr tmp
  #               echo "catting rerun.txt"
  #               cat rerun.txt
  #               echo "Give cucumber one more try"
  #               if bundle exec cucumber @rerun.txt --profile first_rerun
  #               then
  #                 echo "Cucumber worked on retry"
  #                 exit 0
  #               else
  #                 echo "Give cucumber yet another try"
  #                 cat config/cucumber.yml
  #                 bundle exec cucumber @tmp/cucumber_failures_2.log --profile second_rerun
  #               fi
  #             fi
  #           needs_chromedriver: true
  #   steps:
  #     - uses: actions/checkout@v3
  #     - name: Set up Ruby
  #       uses: ruby/setup-ruby@v1
  #       with:
  #         rubygems: 3.3.26
  #         bundler-cache: true
  #     - name: Setup Node.js for use with actions
  #       uses: actions/setup-node@v1
  #       if: matrix.command_configs.skip_js != 'true'
  #       with:
  #         # Version Spec of the version to use.  Examples: 10.x, 10.15.1, >=10.15.0, lts
  #         node-version: ${{ matrix.node }}
  #     - name: Launch MongoDB
  #       uses: wbari/start-mongoDB@v0.2
  #       if: matrix.command_configs.skip_js != 'true'
  #       with:
  #         mongoDBVersion: ${{ matrix.mongodb-version }}
  #     - name: Set up Chromedriver
  #       if: matrix.command_configs.needs_chromedriver
  #       uses: nanasess/setup-chromedriver@master
  #     - name: Cache Gems
  #       uses: actions/cache@v1
  #       with:
  #         path: vendor/bundle
  #         key: ${{ runner.os }}-gems-${{ hashFiles('**/Gemfile.lock') }}
  #         restore-keys: |
  #           ${{ runner.os }}-gems-${{ hashFiles('**/Gemfile.lock') }}
  #     - name: Cache Node Modules
  #       id: npm-cache
  #       if: matrix.command_configs.skip_js != 'true'
  #       uses: actions/cache@v1
  #       with:
  #         path: node_modules
  #         key: ${{ runner.os }}-node_modules-${{ hashFiles('yarn.lock') }}
  #         restore-keys: |
  #           ${{ runner.os }}-node_modules-${{ hashFiles('yarn.lock') }}
  #     - name: bundle install
  #       run: |
  #         gem install bundler -v '1.17.3'          
  #         bundle config path vendor/bundle
  #         bundle install --jobs 4 --retry 3
  #         gem install treye-semaphore_test_boosters --version '2.5.1'
  #         gem install brakeman -v 5.4.1
  #     - name: yarn install
  #       if: matrix.command_configs.skip_js != 'true' && steps.npm-cache.outputs.cache-hit != 'true'
  #       run: |
  #         yarn install
  #     - name: run webpack
  #       if: matrix.command_configs.skip_js != 'true'
  #       run: |
  #         NODE_ENV=test RAILS_ENV=test ./bin/webpack
  #     - name: run tests
  #       run: ${{matrix.command_configs.test_command}}
