name: Build Image and Deploy to Container Registries

on:
  workflow_dispatch:
  push:
    branches:
      - master
      - pv188427863_add_reports_dockerfile
  pull_request:
    branches:
      - master

concurrency:
  group: docker-${{ github.ref }}
  cancel-in-progress: true

env:
  CLIENT: cca

jobs:
  prep:
    if: >-
      github.repository_owner == 'health-connector' && 
        (github.event_name == 'push' || 
        github.event_name == 'workflow_dispatch' || 
        github.event.pull_request.head.repo.owner.login == 'health-connector')
    runs-on: ubuntu-latest
    outputs:
      taggedImage: ${{ steps.prep.outputs.tagged_image }}
      latestTag: ${{ steps.prep.outputs.latest_tag }}
      shortSha: ${{ steps.prep.outputs.short_sha}}
      branchName: ${{ steps.prep.outputs.branch_name }}
      ghRepositoryName: ${{ steps.prep.outputs.gh_repository_name }}
      registryGhcr: ${{ steps.prep.outputs.registry_ghcr }}
    steps:
      - name: Prepare info
        id: prep
        # For BRANCH_NAME, PR will use head_ref (source branch), push will fallback to ref_name (current branch).
        run: |   
          BRANCH_NAME=${{ github.head_ref || github.ref_name }}
          SHORT_SHA=$(echo $GITHUB_SHA | head -c7)
          GH_REPO=$(echo '${{ github.repository }}' | awk -F '/' '{print $2}')
          REGISTRY_GHCR='ghcr.io'
          TAGSAFE_BRANCH_NAME=$(echo $BRANCH_NAME | sed -e 's/[^a-zA-Z0-9_.]/-/g' -e 's/^[-.]//g')
          IMAGE=health-connector/$GH_REPO
          TAG=$TAGSAFE_BRANCH_NAME-$SHORT_SHA
          TAGGED_IMAGE=${IMAGE}:${TAG}
          LATEST_IMAGE=${IMAGE}:latest          
                    
          echo "tagged_image=$TAGGED_IMAGE" >> $GITHUB_OUTPUT
          echo "latest_tag=$LATEST_IMAGE" >> $GITHUB_OUTPUT
          echo "short_sha=$SHORT_SHA" >> $GITHUB_OUTPUT
          echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT
          echo "gh_repository_name=$GH_REPO" >> $GITHUB_OUTPUT
          echo "registry_ghcr=ghcr.io" >> $GITHUB_OUTPUT

  # Uses buildx to build and push the image
  build-and-upload-image:
    if: >-
      github.repository_owner == 'health-connector' && 
        (github.event_name == 'push' || 
        github.event_name == 'workflow_dispatch' || 
        github.event.pull_request.head.repo.owner.login == 'health-connector')
    needs: [prep]
    runs-on: ubuntu-latest
    services:
      rabbitmq:
        image: rabbitmq:latest
        ports:
          - 5672:5672
          - 15672:15672
        options: >-
          --name "rabbitmq"
          --health-cmd "rabbitmqctl node_health_check"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        env:
          RABBITMQ_DEFAULT_USER: 'guest'
          RABBITMQ_DEFAULT_PASS: 'guest'
      mongo:
        image: mongo:5.0
        ports:
          - 27017:27017
        options: >-
          --name "mongo"
          --health-cmd mongo
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    env:
      PUSH_IMAGE: ${{ github.event_name != 'pull_request' }}
    outputs:
      didPush: ${{ steps.job_results.outputs.did_push == 'true' }}

    steps:
      - uses: actions/checkout@v4

      - name: Add git HEAD info to docker image
        run: |
          git show --quiet HEAD > release.txt
          git show --quiet HEAD > public/release.txt

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true
          version: v0.17.1

      # Cache layers specific to current sha, but allow rummaging through older caches if none for current
      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx

      # Add vhosts to RabbitMQ
      - run: |
          docker exec rabbitmq rabbitmqctl add_vhost /
          docker exec rabbitmq rabbitmqctl add_vhost event_source
          docker exec rabbitmq rabbitmqctl set_permissions -p event_source guest ".*" ".*" ".*"

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ needs.prep.outputs.registryGhcr }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and Push Image
        id: build_push
        uses: docker/build-push-action@v6
        with:
          context: .
          file: .docker/Dockerfile.gha
          # Set the desired build target stage here
          target: deploy
          # needed to access mongo and rabbit on GHA machine at build time
          network: host
          # send to container registry if not a pull request (e.g., merge to master or forced run)
          push: ${{ env.PUSH_IMAGE == 'true' }}
          # create local image (for scanning) if it is a pull request
          load: ${{ env.PUSH_IMAGE == 'false' }}
          # For non-"latest" tag, example of format is "ghcr.io/health-connector/enroll:pv188414567_add_gha_workflow-40df5b1-cca"
          tags: |
            ${{ format('{0}/{1}-{2}', needs.prep.outputs.registryGhcr, needs.prep.outputs.taggedImage, env.CLIENT) }}
            ${{ format('{0}/{1}-{2}', needs.prep.outputs.registryGhcr, needs.prep.outputs.latestTag, env.CLIENT) }}
          cache-from: type=local,src=/tmp/.buildx-cache
          # Note the mode=max here, for caching intermediates in multi-stage build
          # More: https://github.com/moby/buildkit?tab=readme-ov-file#local-directory-1
          # And: https://github.com/docker/buildx/blob/master/docs/reference/buildx_build.md#-export-build-cache-to-an-external-cache-destination---cache-to
          cache-to: type=local,mode=max,dest=/tmp/.buildx-cache-new
          # Bump provenance as needed, but keep it minimal until then to minimize risk of leaking secure info
          # https://docs.docker.com/build/ci/github-actions/attestations/#default-provenance
          # Note only supported for image push, not load
          provenance: ${{ env.PUSH_IMAGE == 'true' && 'mode=min' }}
          build-args: |
            HOSTNAME=172.17.0.1

      # See https://docs.docker.com/build/ci/github-actions/cache/#local-cache OR https://github.com/moby/buildkit/issues/1896
      # need for this two-step w/r/t cache-to above and cache movement here.
      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

      - name: Add package push info to summary
        run: |
          if [[ ${{ env.PUSH_IMAGE }} == 'true' ]]; then
            echo 'New images can be found on GHCR here: https://github.com/health-connector/enroll/pkgs/container/enroll.' >> $GITHUB_STEP_SUMMARY
          else
            echo 'Image build triggered as local-only - no image pushed to registry.' >> $GITHUB_STEP_SUMMARY
          fi

      # scan either the pushed image (for non-pr) or the local-only image (for pr)
      - name: Scan Docker image for security issues
        id: scan
        uses: anchore/scan-action@v5
        with:
          image: ${{ format('{0}/{1}-{2}', needs.prep.outputs.registryGhcr, needs.prep.outputs.taggedImage, env.CLIENT) }}
          fail-build: false
          severity-cutoff: critical
          cache-db: true

      - name: Upload security scan SARIF report
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: ${{ steps.scan.outputs.sarif }}

      # Even workflow-level env vars are not available to if conditions on jobs (like the slack jobs that follow). So,
      # pass results on this way. didPush is true if we intended to push and the job didn't die from failure before this.
      - name: Set job results outputs
        id: job_results
        run: |
          echo "did_push=${{ env.PUSH_IMAGE == 'true' }}" >> $GITHUB_OUTPUT      

#  # notify that a new build is available in registry, with source ref
#  new-image-notification:
#    if: ${{ github.repository_owner == 'health-connector' && needs.build-and-upload-image.outputs.didPush }}
#    needs: [prep, build-and-upload-image]
#    runs-on: ubuntu-latest
#    steps:
#      - name: Post to a Slack channel
#        uses: slackapi/slack-github-action@v1
#        with:
#          channel-id: 'docker-images-${{ needs.prep.outputs.ghRepositoryName }}'
#          payload: |
#            {
#              "blocks": [
#                {
#                  "type": "section",
#                  "text": {
#                    "type": "mrkdwn",
#                    "text": "New image built from <https://github.com/health-connector/${{ needs.prep.outputs.ghRepositoryName }}/commit/${{ needs.prep.outputs.shortSha }}|${{ needs.prep.outputs.shortSha }}> on `${{ needs.prep.outputs.branchName }}`"
#                  }
#                }
#              ]
#            }
#        env:
#          SLACK_BOT_TOKEN: ${{ secrets.CCA_DEPLOY_SLACK_BOT_TOKEN }}
#
#  # notify of registry locations of images
#  image-location-notification:
#    if: ${{ github.repository_owner == 'health-connector' && needs.build-and-upload-image.outputs.didPush }}
#    needs: [ new-image-notification, prep, build-and-upload-image ]
#    runs-on: ubuntu-latest
#    steps:
#      - name: Setup variables
#        run: |
#          TAGGED_IMAGE_LOC="${{ format('{0}/{1}-{2}', needs.prep.outputs.registryGhcr, needs.prep.outputs.taggedImage, env.CLIENT) }}"
#          echo "CLIENT_DISPLAY=$(echo $CLIENT | tr '[:lower:]' '[:upper:]')" >> $GITHUB_ENV
#          echo "TAGGED_IMAGE_LOC=$TAGGED_IMAGE_LOC" >> $GITHUB_ENV
#
#      - name: Post to appropriate client slack workspace
#        uses: slackapi/slack-github-action@v1
#        with:
#          channel-id: 'docker-images-${{ needs.prep.outputs.ghRepositoryName }}'
#          payload: |
#            {
#              "blocks": [
#                {
#                  "type": "section",
#                  "text": {
#                    "type": "mrkdwn",
#                    "text": "*${{ format('{0} {1} image*:\n`{2}`', env.CLIENT_DISPLAY, needs.prep.outputs.registryGhcr, env.TAGGED_IMAGE_LOC) }}"
#                  }
#                }
#              ]
#            }
#        env:
#          SLACK_BOT_TOKEN: ${{ secrets.CCA_DEPLOY_SLACK_BOT_TOKEN }}
