name: rspec report
on:
  push:
  workflow_dispatch:

concurrency:
  group: rspec-${{ github.ref }}
  cancel-in-progress: true

env:
  RABBITMQ_DEFAULT_USER: "guest"
  RABBITMQ_DEFAULT_PASS: "guest"

jobs:
  rspec-report:
    strategy:
      fail-fast: false
      matrix:
        folder:
          [
            "components",
            "concerns",
            "controllers",
            "data_migrations",
            "domain",
            "helpers",
            "interactors",
            "invoices",
            "lib",
            "mailers",
            "migrations",
            "models",
            "notices",
            "policies",
            "reports",
            "requests",
            "routing",
            "script",
            "test_data",
            "views",
          ]
    runs-on: ubuntu-latest
    services:
      rabbitmq:
        image: rabbitmq:latest
        ports:
          - 5672:5672
          - 15672:15672
        options: >-
          --name "rabbitmq"
          --health-cmd "rabbitmqctl node_health_check"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      mongo:
        image: mongo:4.2
        ports:
          - 27017:27017
        options: >-
          --name "mongo"
          --health-cmd mongo
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - uses: actions/checkout@v2
      - uses: ruby/setup-ruby@v1
      - uses: actions/setup-node@v2
        with:
          node-version: "12"
      - name: Restore project gems
        uses: actions/cache@v2
        with:
          path: vendor/bundle
          key: v1-${{ runner.os }}-gems-${{ hashFiles('**/Gemfile.lock') }}-${{ hashFiles('**/Gemfile' ) }}
          restore-keys: |
            v1-${{ runner.os }}-gems-${{ hashFiles('**/Gemfile.lock') }}-${{ hashFiles('**/Gemfile' ) }}
      - name: Install project gems
        run: |
          gem update --system
          bundle config path vendor/bundle
          bundle install
      - name: Restore Node Modules
        id: npm-cache
        uses: actions/cache@v2
        with:
          path: node_modules
          key: ${{ runner.os }}-node_v12_modules-${{ hashFiles('yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-node_v12_modules-${{ hashFiles('yarn.lock') }}
      - name: Install node dependencies
        if: steps.npm-cache.outputs.cache-hit != 'true'
        run: yarn install
      - name: run webpack
        run: NODE_ENV=test RAILS_ENV=test ./bin/webpack
      - name: Run tests
        run: bundle exec rspec spec/${{ matrix.folder }} --format json --out ci/rspec/${{matrix.folder}}-rspec-report.json
      - name: Upload build artifact
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.folder }}
          path: ci/rspec/${{ matrix.folder }}-rspec-report.json
  rspec-engines-report:
    strategy:
      fail-fast: false
      matrix:
        folder:
          [
            "benefit_markets",
            "benefit_sponsors",
            "notifier",
            "sponsored_benefits",
            "transport_gateway",
            "transport_profiles",
          ]
    runs-on: ubuntu-latest
    services:
      rabbitmq:
        image: rabbitmq:latest
        ports:
          - 5672:5672
          - 15672:15672
        options: >-
          --name "rabbitmq"
          --health-cmd "rabbitmqctl node_health_check"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      mongo:
        image: mongo:4.2
        ports:
          - 27017:27017
        options: >-
          --name "mongo"
          --health-cmd mongo
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - uses: actions/checkout@v2
      - uses: ruby/setup-ruby@v1
      - uses: actions/setup-node@v2
        with:
          node-version: "12"
      - name: Restore project gems
        uses: actions/cache@v2
        with:
          path: vendor/bundle
          key: v1-${{ matrix.engine-name }}-${{ hashFiles('**/Gemfile.lock') }}
          restore-keys: |
            v1-${{ matrix.engine-name }}-${{ hashFiles('**/Gemfile.lock') }}
      - name: Install project gems
        run: |
          gem update --system --quiet --silent
          bundle config path vendor/bundle
          bundle install
          cd components/${{ matrix.folder }}
          bundle config path ../../vendor/bundle
          bundle install
      - name: Restore Node Modules
        id: npm-cache
        uses: actions/cache@v2
        with:
          path: node_modules
          key: ${{ runner.os }}-node_v12_modules-${{ hashFiles('yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-node_v12_modules-${{ hashFiles('yarn.lock') }}
      - name: Install node dependencies
        if: steps.npm-cache.outputs.cache-hit != 'true'
        run: yarn install
      - name: run webpack
        run: NODE_ENV=test RAILS_ENV=test ./bin/webpack
      - name: Run tests
        run: bundle exec rspec components/${{ matrix.folder }} --format json --out ci/rspec/components-${{matrix.folder}}-rspec-report.json
      - name: Upload build artifact
        uses: actions/upload-artifact@v2
        with:
          name: components-${{ matrix.folder }}
          path: ci/rspec/components-${{ matrix.folder }}-rspec-report.json
  split-config:
    needs: [rspec-report, rspec-engines-report]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      # Download all artifacts into the provided directory
      - uses: actions/download-artifact@v2
        with:
          path: ci/rspec/compressed-reports

      # Move, concat, analyze report, upload split config
      - uses: markgoho/analyze-rspec-report@trunk
        with:
          individual-reports-folder: "ci/rspec/compressed-reports"

      # Analyze benefit-sponsors report, upload split config
      - uses: markgoho/analyze-rspec-report@trunk
        with:
          single-report-path: "ci/rspec/compressed-reports/components-benefit_sponsors/components-benefit_sponsors-rspec-report.json"
          output-report: "benefit_sponsors-split-config.json"
          upload-name: "benefit-sponsors-split"
